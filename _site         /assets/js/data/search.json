[ { "title": "HackTheBox - Cicada", "url": "/CTFs/HTB-Cicada/", "categories": "HackTheBox", "tags": "HackTheBox, Active Directory, LDAP, SMB", "date": "2024-10-13 00:00:00 +0300", "snippet": "I demonstrate how I pwned Cicada on HackTheBox.This box mostly emphasizes two important skills: Enumrating Active Directory’s RIDs for potential list of valid usernames Abusing the backup operato...", "content": "I demonstrate how I pwned Cicada on HackTheBox.This box mostly emphasizes two important skills: Enumrating Active Directory’s RIDs for potential list of valid usernames Abusing the backup operators groupfirst nmap scan:~/htb/cicada$ nmap -sC -sV -Pn -vv -p- -oN scan.nmap 10.10.11.35# Nmap 7.94SVN scan initiated Sun Oct 13 00:57:02 2024 as: nmap -sC -sV -Pn -T4 -v -oN scan.nmap 10.10.11.35Increasing send delay for 10.10.11.35 from 0 to 5 due to 11 out of 25 dropped probes since last increase.Host is up (0.094s latency).Not shown: 65522 filtered tcp ports (no-response)PORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-10-08 02:15:51Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=CICADA-DC.cicada.htb| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:CICADA-DC.cicada.htb| Not valid before: 2024-08-22T20:24:16|_Not valid after: 2025-08-22T20:24:16|_ssl-date: TLS randomness does not represent time445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=CICADA-DC.cicada.htb| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:CICADA-DC.cicada.htb| Not valid before: 2024-08-22T20:24:16|_Not valid after: 2025-08-22T20:24:163268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=CICADA-DC.cicada.htb| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:CICADA-DC.cicada.htb| Not valid before: 2024-08-22T20:24:16|_Not valid after: 2025-08-22T20:24:163269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=CICADA-DC.cicada.htb| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:CICADA-DC.cicada.htb| Not valid before: 2024-08-22T20:24:16|_Not valid after: 2025-08-22T20:24:165985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found55209/tcp open msrpc Microsoft Windows RPCService Info: Host: CICADA-DC; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-security-mode:| 3:1:1:|_ Message signing enabled and required| smb2-time:| date: 2024-10-08T02:16:41|_ start_date: N/A|_clock-skew: 7h00m00sSo it is pure AD enum, after adding cicada.htb to hosts file I get to workSMB EnumerationI started with enumerating the SMB shares with null session:HR share was public so I connected to it and found Notice from HR.txtAfter downloading and reading it I had a Password:I need to obtain a user list in order to validate this password, so I attempted kerbrute, but it was slow and didn’t yield many results.So we can enumerate users by RIDs if we had access to. We can use impacket-lookupsid, Metasploit or there is a cool switch I discovered earlier in NetExec:with some bash we can extract valid users into a file to check with the obtained passcat users.txt | cut -d ':' -f 2 | cut -d '\\' -f 2 | cut -d ' ' -f 1 | uniq &gt;&gt; potential_users.txtAnd we got a hit on mark.wrightsonBefore moving forward, let’s review what RIDs are.RID BruteforcingIn Windows, every object, including users and groups, is identified by a Security Identifier (SID). A SID is composed of: A domain identifier that stays the same for all users within the domain. A RID that uniquely identifies a user or group within the domain.Example Breakdown:SID: S-1-5-21-3623811015-3361044348-30300820-500 Domain SID: S-1-5-21-3623811015-3361044348-30300820 RID: 500 (the built-in Administrator account)So SID = Domain Identifier + RID.Regular user accounts generally start at 1000. So what any of the above tools do is increment the RID by one to get the associated user.Why This Works?Windows doesn’t necessarily block the querying of SIDs, and if the system doesn’t have proper restrictions, it will return details about valid users based on the provided RIDs.MitigationTo mitigate RID enumeration attacks: Accounts: Guest account status: Disabled Network access: Let Everyone permissions apply to anonymous users: Disabled Network access: Restrict anonymous access to Named Pipes and Shares: Enabled Use group policies to restrict SID enumeration by untrusted users.As shown it is disabled by default.Back to pwning..LDAP EnumerationNow I have a valid user and password. After alot of enumerating I queried a ldap query to see users description cause it usually contains passwords.So I got another valid user and pass:I discovered that this user did have access to brand-new SMB share. It is DEV, which I wasn’t previously able to access it.It included a script file, which I downloaded and looked at to discover another user with her password.WINRMing to get the first flagPrivEscFirst thing I did was checking her groups:I leveraged her membership in the Backup Operators group to extract the SAM and system registry files.reg save hklm\\sam c:\\Temp\\samreg save hklm\\system c:\\Temp\\systemUsed Impacket-secretsdump to dump admin hashWINRMing using the admin hash to get the root flagHappy pwning!" }, { "title": "Installing GOAD", "url": "/Active-Directory/installing-goad/", "categories": "Active Directory, GOAD", "tags": "Installation, Active Directory, GOAD", "date": "2024-09-30 00:00:00 +0300", "snippet": "Walking through how I set up the Game Of Active Directory lab using VMware Pro on a Windows host.GOAD is a lab enviroment built for pentesters with alot of misconfigurations to practice different a...", "content": "Walking through how I set up the Game Of Active Directory lab using VMware Pro on a Windows host.GOAD is a lab enviroment built for pentesters with alot of misconfigurations to practice different attack methods and techniques.As described on their repo: The lab intend to be installed from a Linux host and was tested only on this.Some people have successfully installed the lab from a windows OS, to do that they create the VMs with vagrant and have done the ansible provisioning part from a linux machine.So I had two options: Install it on any linux distro and have nested VMs which will slow everything down Figuring out how to set it up on a Windows, as mentioned that some fellas already managed to successfully install the lab from a Windows host.What will we need? Windows host with vagrant installed to download the Windows server 2019 VMs (which I skipped and I will explain later) Ubuntu or any Linux distro to run ansible playbooks scripts I installed the GOAD-light which will have 3 VMs (1 forest and 2 domains): DC01 — kingslanding DC02 — winterfell SRV02 — castelblack which is shown in the schema below:So the process will work as follows: Installing the VMs and configuring them Provisioning Fixing errorsInstalling VMsAs I said earlier I skipped the vagrant part to download the VMs because I already had a Windows 2019 iso image. So, I installed them on VMware like any normal Windows server with default settings. But in order for them to work we had to tweak things a little.Upon examining the Vagrant file, I discovered that the three VMs are assigned the default IP addresses listed below: GOAD-DC01: 192.168.56.10 GOAD-DC02: 192.168.56.11 GOAD-SRV02: 192.168.56.22So the network configuration will be as the following: First network adapter to put the 3 VMs and Ubuntu VM on a same host-only network. Second network adapter to put the 3 VMs and Ubuntu VM on a NAT network.then manually set static IP for each Windows server sequentially. Important note: I had to change the name of Ethernet0 to Ethernet1 and Ethernet1 to Ethernet2, because ansible will treat Ethernet1 as the 192.168.56.xx (Host-only adapter). The Ethernet2 one will be the NAT (for provisioning purposes). Or change it from the inventory file.If you check the inventory file you will see that it uses winrm protocol with user account vagrant and password vagrant. Accordingly, I added this user to each of the 3 VMs and added them in the Administrators group. which is verifiable using:whoami /groupsSecondly I configured winrm on the VMs using the following:winrm quickconfigwinrm set winrm/config/service/auth @{Basic=\"true\"}winrm set winrm/config/service @{AllowUnencrypted=\"true\"}New-NetFirewallRule -Name \"Ansible WinRM\" -DisplayName \"Allow WinRM\" -Protocol TCP -LocalPort 5985 -Action AllowNew-NetFirewallRule -Name \"Ansible WinRM\" -DisplayName \"Allow WinRM\" -Protocol TCP -LocalPort 5986 -Action AllowIn order to check the connection between the VMs, I lastly enabled File and Printer Sharing (Echo Request - ICMPv4-In) from firewall incoming rules. This allows ping requests using the ICMP protocol.Now its time for configuring the Ubuntu VM: Clone the GOAD repo: git clone https://github.com/Orange-Cyberdefense/GOAD.gitcd GOAD/ansible Creating a Python virtual enviroment: python3 -m venv goad-venv installing ansible dependencies: python3 -m pip install ansible-core pywinrmansible-galaxy install -r requirements.yml The Windows servers and Ubuntu VMs are now set up. Provisioning and fixing errorsNow for the errors, the final and most unpleasant phase.I started the ansible playbooks scriptsansible-playbook -i ../ad/GOAD-Light/data/inventory -I ../ad/GOAD-Light/providers/virtualbox/inventory main.ymlbut I encountered this error:So it is trying to use HTTPS and port 5986 but it can’tI first checked if winrm was working and the creds are valid by running evil-winrm toolevil-winrm -u vagrant -p vagrant -i 192.168.56.10which has worked.. Then I checked again ../ad/GOAD-Light/providers/vmware/inventory file and I noticed that the two lines below had been commented out:# ansible_winrm_transport=basic# ansible_port=5985All I had to do was to uncomment them.It then succeeded in connecting to it using winrmThen I got this error on DC02:I tried to install it with a powershell as admin:Install-Module -Name NuGet But It didn’t. So I went to powershell_gallery. downloaded the nukpkg file, extracted it and it add to modules path which can be checked by:$env:PSModulePath -split ';'Check to see if it was installed properly:Get-Module -ListAvailable -Name PowerShellGetand it worked!Again on DC02:The script couldn’t install the DNS server on it’s own. So I manually installed itInstall-WindowsFeature -Name DNSLastly I had some problems on SRV02 with IIS setup, which was caused because of .NET Framework was not installed. I tried to install it using powershell:Install-WindowsFeature -Name NET-Framework-CoreHowever, it didn’t, and after some research, I managed to install it by allowing the virtual machine to install Windows updates as it contains various .NET Framework versions. The remainder of the installation is then handled by the script.Then The playbooks operate without a hitch with these corrections.I verified that DC02 was successfully assigned to the domain (since it had the highest number of errors):[System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain()Using netexec to verify: Now everything is set up!I’ll be posting more on how to take advantage of this lab." } ]
